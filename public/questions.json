{
    "JavaScript":[

        {   "id": 1,
            "question": {
                "text": "Inside which `HTML` element do we put the JavaScript?",
                "code": null
            },
            "answer":  {
                "text": null,
                "code": "`<script>`",
                "source": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script"
            }
            
        },
        {   "id": 2,
            "question": {
                "text": "What is the correct JavaScript syntax to change the content of the `HTML` element below?",
                "code": "`<p id=\"demo\">This is a demonstration.</p>`"
            },
            "answer":  {
                "text": null,
                "code": "document.getElementById('demo').innerHTML",
                "source": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById"
            }
        },        
        {   "id": 3,
            "question": {
                "text": "What is Hoisting in JavaScript?",
                "code": null
            },
            "answer":  {
                "text": "JavaScript Hoisting is a process whereby the declarations of variables, function and classes are moved to the top of their scope prior to code execution. Hoisting allows functions to be safely used in code before they are declared.",
                "code": null,
                "source": "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"
            }
        },
        {   "id": 4,
            "question": {
                "text": "What is Hoisting in JavaScript?",
                "code": null
            },
            "answer":  {
                "text": "JavaScript Hoisting is a process whereby the declarations of variables, function and classes are moved to the top of their scope prior to code execution. \nHoisting allows functions to be safely used in code before they are declared.",
                "code": null,
                "source": "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"
            }
        },
        {   "id": 4,
            "question": {
                "text": "Show an example of variable hoisting with the `var` keyword",
                "code": null
            },
            "answer":  {
                "text": "JavaScript only hoists declarations, not initializations!",
                "code": "```console.log(num); // Returns 'undefined'```\n```var num = 6; // Initialization and declaration.```\n```console.log(num); // Returns 6```",
                "source": "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting#var_hoisting"
            }
        },
        {   "id": 4,
            "question": {
                "text": "Show an example of variable hoisting with the `let` and `const` keywords",
                "code": null
            },
            "answer":  {
                "text": "Variables declared with `let` and `const`, unlike `var`, are not initialized with a default value.",
                "code": "```console.log(num); // Throws ReferenceError```<br> ```let num = 6; // Initialization```",
                "source": "https://developer.mozilla.org/en-US/docs/Glossary/Hoisting#let_and_const_hoisting"
            }
        },
        {   "id": 5,
            "question": {
                "text": "What is a closure?",
                "code": null
            },
            "answer":  {
                "text": "A closure gives you access to an outer function's scope from an inner function.",
                "code": null ,
                "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"
            }
        },
        {   "id": 6,
            "question": {
                "text": "What is `typeof` operator?",
                "code": null
            },
            "answer":  {
                "text": "In JavaScript, the `typeof` operator returns a string indicating the type of its unevaluated operand.",
                "code": "```console.log(typeof 42) // output: \"number\"```",
                "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"
            }
        },
        {   "id": 7,
            "question": {
                "text": "What is a primitive value in JavaScript?",
                "code": null
            },
            "answer":  {
                "text": "In JavaScript, a primitive value is data that is not an object and has no methods. There are 7 primitive data types: string, number, bigint, boolean, undefined, symbol and null. \nAll primitives are immutable.",
                "code": null,
                "source": "https://developer.mozilla.org/en-US/docs/Glossary/Primitive"
            }
        },
        {   "id": 8,
            "question": {
                "text": "What is `NaN` in JavaScript?",
                "code": null
            },
            "answer":  {
                "text": "In JavaScript, `NaN` stand for Not a Number. It is a global property representing a value which is not a valid number.",
                "code": null,
                "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN"
            }
        },
        {   "id": 9,
            "question": {
                "text": "What is `isNaN()` in JavaScript?",
                "code": null
            },
            "answer":  {
                "text": "The `isNaN()` function determines whether a value is `NaN` (not a valid number).",
                "code": "```isNaN(NaN);   // true```\n```isNaN(37);   // false```\n```isNaN('37');   // false```",
                "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN"
            }
        },
        {   "id": 10,
            "question": {
                "text": "What are the JavaScript data types?",
                "code": null
            },
            "answer":  {
                "text": "Data types in JS consisits of **primitive values** and **objects**.\n+ Primitive values:\n  Boolean, Null, Undefined, Number, BigInt, String, Symbol\n + Objects",
                "code": null,
                "source": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures"
            }
        }                   
    ]

}